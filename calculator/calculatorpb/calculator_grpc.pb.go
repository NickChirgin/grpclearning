// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: calculator/calculatorpb/calculator.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrimeService_Prime_FullMethodName          = "/calculator.PrimeService/Prime"
	PrimeService_ComputeAverage_FullMethodName = "/calculator.PrimeService/ComputeAverage"
	PrimeService_MaxInteger_FullMethodName     = "/calculator.PrimeService/MaxInteger"
)

// PrimeServiceClient is the client API for PrimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeServiceClient interface {
	Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeService_PrimeClient, error)
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (PrimeService_ComputeAverageClient, error)
	MaxInteger(ctx context.Context, opts ...grpc.CallOption) (PrimeService_MaxIntegerClient, error)
}

type primeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeServiceClient(cc grpc.ClientConnInterface) PrimeServiceClient {
	return &primeServiceClient{cc}
}

func (c *primeServiceClient) Prime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (PrimeService_PrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeService_ServiceDesc.Streams[0], PrimeService_Prime_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &primeServicePrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeService_PrimeClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type primeServicePrimeClient struct {
	grpc.ClientStream
}

func (x *primeServicePrimeClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primeServiceClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (PrimeService_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeService_ServiceDesc.Streams[1], PrimeService_ComputeAverage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &primeServiceComputeAverageClient{stream}
	return x, nil
}

type PrimeService_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type primeServiceComputeAverageClient struct {
	grpc.ClientStream
}

func (x *primeServiceComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primeServiceComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *primeServiceClient) MaxInteger(ctx context.Context, opts ...grpc.CallOption) (PrimeService_MaxIntegerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeService_ServiceDesc.Streams[2], PrimeService_MaxInteger_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &primeServiceMaxIntegerClient{stream}
	return x, nil
}

type PrimeService_MaxIntegerClient interface {
	Send(*MaxIntegerRequest) error
	Recv() (*MaxIntegerResponse, error)
	grpc.ClientStream
}

type primeServiceMaxIntegerClient struct {
	grpc.ClientStream
}

func (x *primeServiceMaxIntegerClient) Send(m *MaxIntegerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *primeServiceMaxIntegerClient) Recv() (*MaxIntegerResponse, error) {
	m := new(MaxIntegerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeServiceServer is the server API for PrimeService service.
// All implementations must embed UnimplementedPrimeServiceServer
// for forward compatibility
type PrimeServiceServer interface {
	Prime(*PrimeRequest, PrimeService_PrimeServer) error
	ComputeAverage(PrimeService_ComputeAverageServer) error
	MaxInteger(PrimeService_MaxIntegerServer) error
	mustEmbedUnimplementedPrimeServiceServer()
}

// UnimplementedPrimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeServiceServer struct {
}

func (UnimplementedPrimeServiceServer) Prime(*PrimeRequest, PrimeService_PrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method Prime not implemented")
}
func (UnimplementedPrimeServiceServer) ComputeAverage(PrimeService_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (UnimplementedPrimeServiceServer) MaxInteger(PrimeService_MaxIntegerServer) error {
	return status.Errorf(codes.Unimplemented, "method MaxInteger not implemented")
}
func (UnimplementedPrimeServiceServer) mustEmbedUnimplementedPrimeServiceServer() {}

// UnsafePrimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeServiceServer will
// result in compilation errors.
type UnsafePrimeServiceServer interface {
	mustEmbedUnimplementedPrimeServiceServer()
}

func RegisterPrimeServiceServer(s grpc.ServiceRegistrar, srv PrimeServiceServer) {
	s.RegisterService(&PrimeService_ServiceDesc, srv)
}

func _PrimeService_Prime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeServiceServer).Prime(m, &primeServicePrimeServer{stream})
}

type PrimeService_PrimeServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type primeServicePrimeServer struct {
	grpc.ServerStream
}

func (x *primeServicePrimeServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PrimeService_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimeServiceServer).ComputeAverage(&primeServiceComputeAverageServer{stream})
}

type PrimeService_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type primeServiceComputeAverageServer struct {
	grpc.ServerStream
}

func (x *primeServiceComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primeServiceComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PrimeService_MaxInteger_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PrimeServiceServer).MaxInteger(&primeServiceMaxIntegerServer{stream})
}

type PrimeService_MaxIntegerServer interface {
	Send(*MaxIntegerResponse) error
	Recv() (*MaxIntegerRequest, error)
	grpc.ServerStream
}

type primeServiceMaxIntegerServer struct {
	grpc.ServerStream
}

func (x *primeServiceMaxIntegerServer) Send(m *MaxIntegerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *primeServiceMaxIntegerServer) Recv() (*MaxIntegerRequest, error) {
	m := new(MaxIntegerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeService_ServiceDesc is the grpc.ServiceDesc for PrimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.PrimeService",
	HandlerType: (*PrimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Prime",
			Handler:       _PrimeService_Prime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _PrimeService_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MaxInteger",
			Handler:       _PrimeService_MaxInteger_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculator/calculatorpb/calculator.proto",
}
